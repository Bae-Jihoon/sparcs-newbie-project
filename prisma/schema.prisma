// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  nickname     String        @unique
  password     String
  startedAt    DateTime?
  createdAt    DateTime?     @default(now())
  posts        Post[]
  comments     Comment[]
  spots        Spot[]
  spotComments SpotComment[]
  likes        Like[]
  CommentLike  CommentLike[]
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(50)
  content    String    @db.Text
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  likenum    Int       @default(0)
  commentnum Int       @default(0)
  comments   Comment[]
  likes      Like[]
  imagePaths Image[]
}

model Image {
  id     Int    @id @default(autoincrement())
  path   String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Comment {
  id           Int           @id @default(autoincrement())
  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
  content      String
  likenum      Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  children     Comment[]     @relation("CommentReplies")
  parent       Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     Int?
  commentLikes CommentLike[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Spot {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(20)
  description String        @db.VarChar(255)
  latitude    Decimal       @db.Decimal(10, 8)
  longitude   Decimal       @db.Decimal(11, 8)
  roadAddress String
  createdAt   DateTime      @default(now())
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  avgRate     Float         @default(0)
  commentnum  Int           @default(0)
  sharelink   String        @unique
  comments    SpotComment[]
}

model SpotComment {
  id        Int      @id @default(autoincrement())
  content   String?  @db.VarChar(50)
  rate      Int      @db.TinyInt
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    Int

  @@unique([authorId, spotId])
}
